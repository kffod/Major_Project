# -*- coding: utf-8 -*-
"""redditbotdetection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LViVjnKukrquVTVZUsvafbmVO2LsW6_p
"""

import re
import pandas as pd
from datetime import datetime

def bot_prediction_algorithm(input_data):
    # Extract features from input_data
    post_karma = input_data.get('post_karma', 0)
    comment_karma = input_data.get('comment_karma', 0)
    cake_day = input_data.get('cake_day', 0)
    achievements = input_data.get('achievements', [])
    trophy_case = input_data.get('trophy_case', [])

    # Step 1: Calculate account age (in days) based on cake day (account creation date)
    current_date = datetime.now()
    account_creation_date = datetime.utcfromtimestamp(cake_day)
    account_age = (current_date - account_creation_date).days

    # Step 2: Check if the account is less than 30 days old (likely a bot)
    if account_age < 30:
        return 1  # Likely a bot due to being a new account

    # Step 3: Karma analysis (low karma can indicate bot-like behavior)
    karma_threshold = 50
    if post_karma < karma_threshold and comment_karma < karma_threshold:
        return 1  # Low karma is indicative of a bot account

    # Step 4: Analyze achievements (bots typically do not earn many achievements)
    bot_keywords_achievements = ['Popular Post', 'Buzz-Worthy Post', 'Picasso']
    bot_achievements = [ach for ach in achievements if any(re.search(keyword, ach, re.IGNORECASE) for keyword in bot_keywords_achievements)]
    if len(bot_achievements) > 2:  # Account has suspiciously high achievements
        return 1  # Likely a bot

    # Step 5: Trophy Case analysis (Verified Email and Four-Year Club are unusual for bots)
    suspicious_trophies = ['Four-Year Club', 'Verified Email']
    if any(trophy in trophy_case for trophy in suspicious_trophies):
        return 0  # Account has real user trophies

    # Step 6: Excessive activity might be bot-like (e.g., high karma without sufficient comments)
    if post_karma > 1000 and comment_karma < 50:
        return 1  # High post karma but low comment karma is suspicious

    # Step 7: If none of the above conditions are met, consider it as a human account
    return 0  # Account is not a bot

# Example usage
user_data = {
    'post_karma': 1947,
    'comment_karma': 564,
    'cake_day': 1609478400,  # Timestamp for 1/2/2021
    'achievements': ["Popular Post", "Buzz-Worthy Post", "Picasso"],
    'trophy_case': ["Four-Year Club", "Verified Email"]
}

prediction = bot_prediction_algorithm(user_data)
if prediction == 1:
    print("This account seems to be a bot 🤖")
else:
    print("This account does not seem to be a bot 👨🏻")

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from datetime import datetime

# Sample dataset
data = {
    'post_karma': [100, 150, 300, 0, 5, 500, 1000, 10, 200, 150],
    'comment_karma': [50, 30, 150, 10, 2, 800, 50, 20, 250, 50],
    'cake_day': [1609478400, 1606704000, 1598918400, 1675171200, 1677072000, 1577836800, 1609478400, 1679011200, 1564867200, 1656729600],
    'achievements': ["Popular Post, Buzz-Worthy Post", "None", "Popular Post", "None", "None", "Picasso", "Popular Post", "None", "Picasso", "None"],
    'trophy_case': ["Four-Year Club, Verified Email", "None", "Verified Email", "None", "None", "Four-Year Club, Verified Email", "Verified Email", "None", "None", "None"],
    'label': [0, 0, 0, 1, 1, 0, 0, 1, 0, 1]  # 1: bot, 0: not a bot
}

# Create a DataFrame
df = pd.DataFrame(data)

# Feature Engineering: Calculate account age (days) based on cake_day
current_date = datetime.now()
df['account_age'] = (current_date - pd.to_datetime(df['cake_day'], unit='s')).dt.days

# Preprocess and prepare features for training
X = df[['post_karma', 'comment_karma', 'account_age']]
y = df['label']

# Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Train Random Forest Classifier
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Make Predictions
y_pred = model.predict(X_test)

# Calculate Metrics
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)

# Print the metrics
print(f"Accuracy: {accuracy * 100:.2f}%")
print(f"Precision: {precision * 100:.2f}%")
print(f"Recall: {recall * 100:.2f}%")
print(f"F1-Score: {f1 * 100:.2f}%")

import pickle

# Save the model to a .pkl file using pickle
with open('reddit_bot_detection_model.pkl', 'wb') as f:
    pickle.dump(model, f)

print("Model saved as 'reddit_bot_detection_model.pkl'")